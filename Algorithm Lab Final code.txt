1. Insert into Linear Array.cpp

#include <iostream>
using namespace std;

int main() {
    int arr[100], n, pos, value;

    cout << "Enter number of elements: ";
    cin >> n;

    cout << "Enter elements: ";
    for (int i = 0; i < n; i++){
        cin >> arr[i];
    }

    cout << "Enter position of index to insert : ";
    cin >> pos;

    cout << "Enter value to insert: ";
    cin >> value;

    for (int i = n; i > pos; i--){
        arr[i] = arr[i - 1];
        arr[pos] = value;
        n++;
    }
    cout << "Updated array: ";
    for (int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }
    return 0;
}












2. Linear Search.cpp

#include<bits/stdc++.h>
using namespace std;

int main(){
    int n,i;
    cout<<"Inter the size of array : ";
    cin>>n;
    int arr[n];

    for(i=0;i<n;i++){
        cin>>arr[i];
    }
    int item;
    cout<<"Search item ";
    cin>>item;

    for(i=0;i<n;i++){
        if(arr[i]==item){
            cout<<"Item is " <<arr[i] <<" at index " <<i;
            return 0;
        }
    }
    cout<<"Item not found";
}










3. Binary Search.cpp

#include<bits/stdc++.h>
using namespace std;

int binarySearch(int mainArray[],int startIndex,int endIndex, int searchItem);
 int main(){
 	 int n,i;
 	 cout<<"Inter the size of Array : ";
 	 cin>>n;
 	 int mainArray[n];
 	 for(i=0;i<n;i++){
        cin>>mainArray[i];
 	 }
 	 int arraySize = sizeof(mainArray)/sizeof(mainArray[0]);
 	 cout<<"Array Data : ";
 	 for(i=0;i<n;i++){
        cout<<mainArray[i]<<" ";
 	 }
     int searchItem;
     cout<<"\nSearch Item : ";
     cin>>searchItem;

     int result = binarySearch(mainArray,0,arraySize-1,searchItem);
 	 if(result==-1){
        cout<<searchItem<<" is not found ";
 	 }
 	 else{
        cout<<searchItem<<" is found at index " <<result;
 	 }
 	 return 0;
 }
  int binarySearch(int mainArray[],int startIndex,int endIndex, int searchItem){
     while(startIndex <= endIndex){
            int mid=(startIndex+endIndex)/2;
            if(mainArray[mid]==searchItem)
            return mid;
            else if(mainArray[mid]<searchItem)
            startIndex=mid+1;
            else{
            endIndex=mid-1;
            }
        }
 return -1;
}









4.Bubble Sort.cpp

#include <iostream>
using namespace std;

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (arr[j] > arr[j + 1])
                swap(arr[j], arr[j + 1]);
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);

    bubbleSort(arr, n);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) 
        cout << arr[i] << " ";

    return 0;
}












5.BFS.cpp

#include<bits/stdc++.h>
using namespace std;

main()
    {
        int node,edge;
        cin>>node>>edge;
        vector<int>adj_mat[node+1];
        bool visited[node+1];

        for(int i=1;i<=edge;i++)
        {
            int a,b;
            cin>>a>>b;
            adj_mat[a].push_back(b);
            adj_mat[b].push_back(a);
            visited[a] = false;
            visited[b] = false;

        }
       cout<<"Adjacency matrix:\n";
        for(int i=1;i<=node;i++)
        {
            cout<<i<<"->";
            for(int j=0;j<adj_mat[i].size();j++)
            {
                cout<<adj_mat[i][j]<<", ";
            }
            cout<<endl;
        }
    cout<<"Visited Node:\n";
        queue<int>que;
        que.push(1);
        visited[1]=true;
        while(!que.empty())
        {
            int x = que.front();
            que.pop();
            cout<<x<<" ";
            for(int j=0;j<adj_mat[x].size();j++)
            {
                int e=adj_mat[x][j];
                if(!visited[e])
                {
                    que.push(e);
                    visited[e]=true;
                }
            }
        }
    }








6.DFS.cpp

#include<bits/stdc++.h>
using namespace std;

main()
    {
        int node,edge;
        cin>>node>>edge;
        vector<int>adj_mat[node+1];
        bool visited[node+1];

        for(int i=1;i<=edge;i++)
        {
            int a,b;
            cin>>a>>b;
            adj_mat[a].push_back(b);
            adj_mat[b].push_back(a);
            visited[a] = false;
            visited[b] = false;

        }
       cout<<"Adjacency matrix:\n";
        for(int i=1;i<=node;i++)
        {
            cout<<i<<"->";
            for(int j=0;j<adj_mat[i].size();j++)
            {
                cout<<adj_mat[i][j]<<", ";
            }
            cout<<endl;
        }
    cout<<"Visited Node:\n";
        stack<int>stk;
        stk.push(1);
        visited[1]=true;
        while(!stk.empty())
        {
            int x = stk.top();
            stk.pop();
            cout<<x<<" ";
            for(int j=0;j<adj_mat[x].size();j++)
            {
                int e=adj_mat[x][j];
                if(!visited[e])
                {
                    stk.push(e);
                    visited[e]=true;
                }
            }
        }
    }












7.Shortest Path.cpp
Pending...........